/******************************************************************************
 *denoise工程的sdk
 *作者：康文正
 ******************************************************************************/

//#include <stdio.h>
//#include "xil_printf.h"
//#include <stdlib.h>
//#include "xil_cache.h"
//
//#include "xil_io.h"
//#include "ff.h"
//
//#include "xscugic.h"
//#include "xil_exception.h"
//#include "xparameters.h"

#include "the_lib.h"

#include "my_sd.h"

#include "my_intr.h"

//FATFS FatFs; //file sys
//static XScuGic INTCInst;

//
///*
// * 挂载一个FAT32文件系统
// * path:路径
// * return:0成功 -1失败
//*/
//int mount_fs(char path[]){
//	FRESULT fr;
//	fr = f_mount(&FatFs, path, 0);
//	if (fr == FR_OK) {
//		printf("mount it\n");
//		return 0;
//	} else {
//		printf("not mount\n");
//		return -1;
//	}
//}
///*
// * 将一组数据传入ddr的对应地址之中
// * base_ddr基地址 num_arr数组
// */
//int send_to_ddr(unsigned int base_addr, unsigned char number_array[], int column_count){
//	int i,j;
//
//	//每16B按照小端方式送入
//	for(i = 0; i < column_count; i = i + LITTLE_ENDIAN_AXI){
//		for(j = 0; j < column_count; j++){
//			Xil_Out8(i + j + base_addr, number_array[i + LITTLE_ENDIAN_AXI - 1 - j]);
//
//		}
//	}
//	return 0;
//}
//
//
///*
// * 读取文件，将其中的换行符删去，每两个字符一组转化成8bit的数据
// * path:文件位置
// * read_number_array:存储转化后的二维数据
// * read_count:转化后的特征图的每行个数
// */
//int file_read(char* path, int* column_count) {
//	FIL fil; //file obeject
//	FRESULT fr;
//	char str_num[3];
//	unsigned int count_r;
//	unsigned char read_number[64]; //读出的每行数据
//	int i = 0;
//	int j = 0;
//	int p;
//	*column_count = 0;
//
//	xil_printf("*************read process*****************\n");
//
//	//open the file
//	fr = f_open(&fil, path, FA_READ);
//	if (fr == FR_OK) {
//		xil_printf("open it\n");
//	} else {
//		xil_printf("wrong open\n");
//		return -1;
//	}
//
//
//	//init
//	memset(str_num, '\0', sizeof(str_num));
//
//	i = 0;
//	while(1){
//		j = 0;
//		while (1) {
//			if(f_read(&fil, str_num, 1, &count_r)!=FR_OK ){
//				f_close(&fil);
//				xil_printf("wrong read\n");
//				return -1;
//			}
//			else if(str_num[0] == '\n'){
//				break;
//			}
//
//			if(f_read(&fil, str_num + 1, 1, &count_r)!=FR_OK){
//				f_close(&fil);
//				xil_printf("wrong read\n");
//				return -1;
//			}
//			else if(str_num[1] == '\n'){
//				break;
//			}
//			else{
//				*column_count = *column_count + 1;
//			}
//
//			if (f_eof(&fil)) break;
//
////			xil_printf("\t->the %d content: %s\n",*column_count, str_num);
//			read_number[j++] = (unsigned char) (strtol(str_num, NULL, 16));
//		}
//
//		send_to_ddr(DDR_BASE_ADDR_R + *column_count * i, read_number, *column_count);
//		*column_count = 0;
//
//		for(p = 0; p < i / DATA_SIZE * 100; p++)
//			xil_printf("#");
//		xil_printf("\r\n");
//
//		if (f_eof(&fil)) break;
//		i++;
//	}
//
//
//
//
//	f_close(&fil);
//	Xil_DCacheFlush();//将cache推送
//	xil_printf("file_READ_operation and send_to_ddr operation done\n");
//
//	return 0;
//}
//
///*
// * 写入文件
// * path:文件位置
// * line_write:写入的数据
// * size:写入数目
// */
//int file_write(char*path, char* content_write, int size) {
//	FIL fil;
//	FRESULT fr; //FatFs return code
//	unsigned int count_w = 0;
//
//	xil_printf("*************write process*****************\n");
//
//	//open a file
//	fr = f_open(&fil, path, FA_CREATE_ALWAYS | FA_WRITE);
//	if (fr == FR_OK) {
//		xil_printf("open it\n");
//	} else {
//		xil_printf("wrong open\n");
//		return -1;
//	}
//
//	//write
//	fr = f_write(&fil, content_write, size, &count_w);
//	if (fr == FR_OK) {
//		xil_printf("\t->write content:%s\n", content_write);
//	} else {
//		f_close(&fil);
//		xil_printf("wrong write\n");
//		return -1;
//	}
//	f_close(&fil);
//
//	xil_printf("file_WRITE_operation done\n");
//	return 1;
//}
//
///*
// * 当finish的时候执行该中断
// * num:无意义
// * */
//static void finish_handler(void* num){
//	//直接输出
//	xil_printf("the finish state is comming\n");
//}
//
///*
// * 设置中断敏感电平
// * 中断id，中断类型
// * */
//static void IntcTypeSetup(XScuGic *InstancePtr, int intId, int intType){
//
//	int mask;
//    intType &= INT_TYPE_MASK;
//    mask = XScuGic_DistReadReg(InstancePtr, INT_CFG0_OFFSET + (intId/16)*4);//除以16是说32bit的寄存器2位一个电平，那么一个寄存器16个intId，*4是一个这种寄存器4byte
//    mask &= ~(INT_TYPE_MASK << (intId%16)*2);//一个寄存器16个intId，那么就左移，清零对应出发设置
//    mask |= intType << ((intId%16)*2);//设置对应的触发敏感设置
//    XScuGic_DistWriteReg(InstancePtr, INT_CFG0_OFFSET + (intId/16)*4, mask);//写回
//}
//
//
///*
// * 初始化中断处理的部分，并且设置中断触发等
// * DevicedId:GIC设备id
// */
//static int IntcInitFunction(u16 DeviceId){
//	XScuGic_Config *IntcConfig;
//	int status;
//
//	// 初始化GIC
//    IntcConfig = XScuGic_LookupConfig(DeviceId);
//    status = XScuGic_CfgInitialize(&INTCInst, IntcConfig, IntcConfig->CpuBaseAddress);
//    if(status != XST_SUCCESS) return XST_FAILURE;
//
//    // 注册异常处理，并使能
//    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
//                                 (Xil_ExceptionHandler)XScuGic_InterruptHandler,
//                                 &INTCInst);
//    Xil_ExceptionEnable();
//
//    // 关联中断处理函数和中断
//    status = XScuGic_Connect(&INTCInst, FINISH_INT, (Xil_ExceptionHandler)finish_handler, (void *)1);
//
//    if(status != XST_SUCCESS) return XST_FAILURE;
//
//    // 设置中断边沿触发方式
//    IntcTypeSetup(&INTCInst, FINISH_INT, INT_TYPE_RISING_EDGE);
//
//    // 使能中断Enable SW1~SW3 interrupts in the controller
//    XScuGic_Enable(&INTCInst, FINISH_INT);
//
//    return XST_SUCCESS;
//}

int main() {

	char m_path[100] = "0:";
//	char test_file_path[100] = "/test/input.txt";
//	char content_write[100];

	char feature_path[100] = "/denoise/input.txt";
	char path[200];

	int column_count = 0; //the size of lines

	//挂文件系统
	if(mount_fs(m_path) == -1)
		return -1;






	//////////////////////////////////////////////////
	//从文件中读出我的特征数据,写入到ddr
	//////////////////////////////////////////////////
	strcpy(path,m_path);
	strcat(path,feature_path);
	xil_printf("the features path is:%s\n", path);
	if(file_read(path, &column_count) == 1) {
		xil_printf("read to %x has been done\n", DDR_BASE_ADDR_R);
	}

//	Xil_Out32(0x09000000,0xFFFFFFFF);

	//////////////////////////////////////////////////
	//读ddr，查看pl是否写入了数据
	//////////////////////////////////////////////////

	int i;
	char signal;

	unsigned int data_0, data_1, data_2, data_3;	//这其中后者的地址高一些

	IntcInitFunction(INTC_DEVICE_ID);//做中断的


	//注意：这里取出来的数是按小端方式排列的，低位高位在低地址，经过验证AXI4写入数据的时候也是按照小端方式写入的,低位在低地址
	while (1) {
		scanf("%c", &signal);
		if (signal == 'w') {
			for (i = DDR_BASE_ADDR_W; i < 1024 + DDR_BASE_ADDR_W; i = i + 16) {
				data_0 = (unsigned int) Xil_In32(i);
				data_1 = (unsigned int) Xil_In32(i + 0x4);
				data_2 = (unsigned int) Xil_In32(i + 0x8);
				data_3 = (unsigned int) Xil_In32(i + 0xc);
				printf("addr:%08x is number:%016x%016x%016x%016x\n", i, data_3,
						data_2, data_1, data_0);
			}
		}
	}


	return 0;
}
